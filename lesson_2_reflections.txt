#What happens when you initialize a repository? Why do you need to do it?
A .git folder is created for my commits. It needs to be initilized so git can
record commits and other data.

#How is the staging area different from the working directory and the 
#repository? What value do you think it offers?
The staging area is an area to organize your commits. The working directory
is the directory you're working in. The staging area's value is allowing you to
logically seperate commits after some work is done. Even if it made sense to 
complete the work together, or you forgot to commit at a good point, commiting
together may not make logical sense. 

#How can you use the staging area to make sure you have one commit per logical
#change?
Stage only what makes logical sense to commit together, commit it, comment on
it... then procced to stage and commit as is logical until done.

#What are some situations when branches would be helpful in keeping your
#history organized? How would branches help?
Branches would be useful for new features, refactoring, and when you have two+
versions of a product available. You can merge features branches in the future.

#How do the diagrams help you visualize the branch structure?
Diagrams make visualizing branches that much easier. 

#What is the result of merging two branches together? Why do we represent it in
#the diagram the way we do?
The result is all the commits being accessible by one branch head. The commits 
are organized in order of timestamp.

#What are the pros and the cons of Git's automatic merging vs always doing
#merges manually?
Pro: less lines to examine ... con: not as in control? Git leaves all conflicts
up to the user so it's not too much of a problem.