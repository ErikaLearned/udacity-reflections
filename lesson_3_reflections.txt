#When would you want to use a remote repository rather than keeping all your 
#work local?
Allows for ease of sharing and for you to work from a variety of places. 
Portability and shareability.

#Why might you want to always pull changes manually rather than having Git 
#automatically stay up-to-date with your remote repository?
Control. You may not want the changes that have been made for reasons such as
the change not being your change. You also don't want to go back to your
project and not realize changes have happened while you were away. Doing it
manually ensures you know changes happened.

#Describe the differences between forks, clones, and branches. When would you
#use one instead of another?
Fork: cloning kept completely on GitHub and gives credit to the creator
    - useful for working on a project you didn't create
	- useful for groups working on the same project
Clone: copying a repo to a new place on a computer
     - useful for working on a project on your computer or starting something
	   that doesn't fit into branching
Branch: a name assigned to a sequence of commits - useful for features, ect
      - useful for when you want to maintain a working product (usually master)
	    and still work on feature, experiment, etc.
      - useful for groups working on the same project
	  
#What is the benefit of having a copy of the last known state of the remote
#stored locally?
I can work offline. 

#How would you collaborate without usuing Git or GitHub? What would be easier,
#and what would be harder?
Possibily through something like Google Docs or by using a stick drive as the 
"main branch." It would be easier to keep things private with the stick drive
but everything else is a difficulty: merging, sharing, etc.

#When would you want to make changes in a seperate branch rather than directly
#in master? What benefits does each approach have?
A seperate branch is good for changes that work on new features while the 
master contains a working version of the project. A seperate branch is also
good for when collaborating. It allows for pull requests. However working
directly on the master is much quicker. If you're collaborating, working on
the master directly can cause a lot of frustration. 